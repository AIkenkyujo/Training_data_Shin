# Pythonのプログラミング基礎を学ぼう

## 変数を使ってみよう

a = 12
# print(a)

b = "Hello"
print(b)


## 算術演算を使ってみよう

height = 20
width = 20

area = height * width / 2

print(area)


## データ型について学習しよう

kion = 30
print("今日の気温は" + kion + "度です。")


kion = str(30)
print("今日の気温は" + kion + "度です。")

kion = 30
print("今日の気温は" + str(kion) + "度です。")


# 入力が2つの単純パーセプトロンを作ってみよう

# 入力と重みの設定
x1 = 2.0
x2 = 1.0
w1 = 0.5
w2 = -0.5

# 全結合の計算式
y = x1 * w1 + x2 * w2
print(y)



# 単純パーセプトロンをニューラルネットワークにしよう

x1 = 2.0
x2 = 1.0
x3 = 0.5
w1 = 0.5
w2 = -0.5
w3 = -1.5
w4 = 1.2
w5 = 1.0
w6 = -2.0
w7 = 1.4
w8 = -2.0

u1 = x1 * w1 + x2 * w3 + x3 * w5
u2 = x1 * w2 + x2 * w4 + x3 * w6
y = u1 * w7 + u2 * w8

print(y)


# リストを導入してみよう
##リスト内のデータの呼び出し

x = [2.0, 1.0, 0.5]
print(x[0])
print(x[1])
print(x[2])


## リスト内のデータの変更

x = [2.0, 1.0, 0.5]
x[1] = 3.0
print(x)


## リスト内のデータの追加(append)

x = [2.0, 1.0, 0.5]
x.append(1.0)
x.append(2.5)
print(x)

## 多重リスト

w = [[0.5, -1.5, 1.0], [-0.5, 1.2, -2.0]]
print(w[0][1])
print(w[1][2])


## リストをニューラルネットワークに導入してみよう

x = [2.0, 1.0, 0.5]
w_x = [[0.5, -1.5, 1.0], [-0.5, 1.2, -2.0]]
w_u = [1.4, -2.0]

u1 = x[0] * w_x[0][0] + x[1] * w_x[0][1] + x[2] * w_x[0][2]
u2 = x[0] * w_x[1][0] + x[1] * w_x[1][1] + x[2] * w_x[1][2]
y = u1 * w_u[0] + u2 * w_u[1]

print(y)



# ライブラリ「Numpy」を導入してみよう

## Numpyを使ってみよう

import numpy as np

a = [1.5, 2.5, 3.5]
b = [1.0, 2.0, 3.0]
c = a + b

print(c)

a_matrix = np.array(a)
b_matrix = np.array(b)
c_matrix = a_matrix + b_matrix

print(c_matrix)


## NumPyを使って行列の積を計算してみよう

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
C = np.dot(A, B)

print(C)


## NumPyをニューラルネットワークに導入してみよう

import numpy as np

x = np.array([2.0, 1.0, 0.5])
w_x = np.array([[0.5, -0.5, -2.0], [-1.5, 1.2, -0.8], [1.0, -2.0, 0.3]])
w_u = np.array([1.4, -2.0, -1.0])

u = np.dot(x, w_x)
y = np.dot(u, w_u)

print(y)



# 関数を導入してみよう

## 関数を使ってみよう

def triangle_area(height, width):
    area = height * width / 2
    return area

print(triangle_area(10, 20)) 


## 関数を使ってステップ関数を定義してみよう

def step_function(x):
    y = 1 * (x > 0)
    return y

a = 5
b = -2

print(step_function(a))
print(step_function(b))




import numpy as np

x = np.array([-1.0, 1.0, 2.0])

y = x > 0
print(y)

y = y.astype(np.int)
print(y)

# ステップ関数
def step (x):
    y = x > 0 
    return y.astype(np.int) 



## 関数をニューラルネットワークに導入してみよう

### コピー元として使用するプログラミングコード

import numpy as np

x = np.array([2.0, 1.0, 0.5])
w_x = np.array([[0.5, -0.5, -2.0, 1.0], [-1.5, 1.2, -0.8, -0.5], [1.0, -2.0, 0.3, 2.0]])
w_u1 = np.array([[1.2, 2.0], [-1.0, -2.0], [1.2, 1.0], [-0.4, 1.0]])
w_u2 = np.array([1.4, 1.5])

u1 = np.dot(x, w_x)
u2 = np.dot(u1, w_u1)
y = np.dot(u2, w_u2)

print(y)


### 全体のソースコード

import numpy as np

def step (x):
    y = x > 0 
    return y.astype(np.int) 

x = np.array([2.0, 1.0, 0.5])
w_x = np.array([[0.5, -0.5, -2.0, 1.0], [-1.5, 1.2, -0.8, -0.5], [1.0, -2.0, 0.3, 2.0]])
w_u1 = np.array([[1.2, 2.0], [-1.0, -2.0], [1.2, 1.0], [-0.4, 1.0]])
w_u2 = np.array([1.4, 1.5])

u1 = np.dot(x, w_x)
z1 = step(u1)
u2 = np.dot(z1, w_u1)
z2 = step(u2)
y = np.dot(z2, w_u2)

print(y)



# ループ処理を導入してみよう

### コピー元として使用するプログラミングコード


import numpy as np

def step (x):
    y = x > 0 
    return y.astype(np.int)

x = np.array([2.0, 1.0, 0.5])
w_x = np.array([[0.5, -0.5, -2.0, 1.0], [-1.5, 1.2, -0.8, -0.5], [1.0, -2.0, 0.3, 2.0]])
w_u1 = np.array([[1.2, 2.0], [-1.0, -2.0], [1.2, 1.0], [-0.4, 1.0]])
w_u2 = np.array([1.4, 1.5])

u1 = np.dot(x, w_x)
z1 = step(u1)
u2 = np.dot(z1, w_u1)
z2 = step(u2)
y = np.dot(z2, w_u2)

print(y)


### 全体のソースコード

import numpy as np

def step (x):
    y = x > 0 
    return y.astype(np.int)

data = np.array([[2.0, 1.0, 0.5], [1.0, 2.0, -0.5]])

for x in data:
    w_x = np.array([[0.5, -0.5, -2.0, 1.0], [-1.5, 1.2, -0.8, -0.5], [1.0, -2.0, 0.3, 2.0]])
    w_u1 = np.array([[1.2, 2.0], [-1.0, -2.0], [1.2, 1.0], [-0.4, 1.0]])
    w_u2 = np.array([1.4, 1.5])
    u1 = np.dot(x, w_x)
    z1 = step(u1)
    u2 = np.dot(z1, w_u1)
    z2 = step(u2)
    y = np.dot(z2, w_u2)
    print(y)


# 外部データを読み込んでみよう

### コピー元として使用するプログラミングコード

import numpy as np

def step(x):
    return np.array(x > 0, dtype=np.int)

# ここにCSVデータインポートを記述
# ここにCSVデータインポートを記述
# ここにCSVデータインポートを記述
# ここにCSVデータインポートを記述
# ここにCSVデータインポートを記述

for x in data:
    w_x = np.array([[0.46, 0.43, -0.31, 0.16],
                    [-0.31, 0.08, 0.18, -0.52],
                    [-0.67, 0.27, -0.19, -0.05],
                    [0.02, 0.04, 0.10, -0.35],
                    [-0.87, 0.65, 0.15, -0.12]])

    w_u1 = np.array([[-0.68, 0.01],
                    [0.10, 0.50],
                    [-0.10, -0.21],
                    [-1.25, 0.50]])

    w_u2 =  np.array([0.43, -0.19])

    U1 = np.dot(x, w_x)
    Z1 = step(U1)
    U2 = np.dot(Z1, w_u1)
    Z2 = step(U2)
    U3 = np.dot(Z2, w_u2)
    y = step(U3)
    print(y)


### 全体のソースコード

import numpy as np

def step(x):
    return np.array(x > 0, dtype=np.int)

data = []
data_file = open("gaibu_data.csv", "r", encoding="UTF-8")
for line in data_file:
    line = line.rstrip("\n").split(",")
    data.append([float(line[0]), float(line[1]), float(line[2]) , float(line[3]) , float(line[4])])

data_file.close()

for x in data:
    w_x = np.array([[0.46, 0.43, -0.31, 0.16],
                    [-0.31, 0.08, 0.18, -0.52],
                    [-0.67, 0.27, -0.19, -0.05],
                    [0.02, 0.04, 0.10, -0.35],
                    [-0.87, 0.65, 0.15, -0.12]])

    w_u1 = np.array([[-0.68, 0.01],
                    [0.10, 0.50],
                    [-0.10, -0.21],
                    [-1.25, 0.50]])

    w_u2 =  np.array([0.43, -0.19])

    U1 = np.dot(x, w_x)
    Z1 = step(U1)
    U2 = np.dot(Z1, w_u1)
    Z2 = step(U2)
    U3 = np.dot(Z2, w_u2)
    y = step(U3)
    print(y)


import numpy as np

def step(x):
    return np.array(x > 0, dtype=np.int)

data = []
data_file = open("gaibu_data.csv", "r", encoding="UTF-8")
for line in data_file:
    line = line.rstrip("\n").split(",")
    data.append([float(line[0]), float(line[1]), float(line[2]) , float(line[3]) , float(line[4])])

data_file.close()

for x in data:
    w_x = np.array([[0.46, 0.43, -0.31, 0.16],
                    [-0.31, 0.08, 0.18, -0.52],
                    [-0.67, 0.27, -0.19, -0.05],
                    [0.02, 0.04, 0.10, -0.35],
                    [-0.87, 0.65, 0.15, -0.12]])

    w_u1 = np.array([[-0.68, 0.01],
                    [0.10, 0.50],
                    [-0.10, -0.21],
                    [-1.25, 0.50]])

    w_u2 =  np.array([0.43, -0.19])

    U1 = np.dot(x, w_x)
    Z1 = step(U1)
    U2 = np.dot(Z1, w_u1)
    Z2 = step(U2)
    U3 = np.dot(Z2, w_u2)
    y = step(U3)
    print(y)


## 条件分岐をニューラルネットワークに導入してみよう

### コピー元として使用するプログラミングコード
import numpy as np

def step (x):
    y = x > 0 
    return y.astype(np.int)

data = []
data_file = open("gaibu_data.csv", "r",encoding="UTF-8")
for line in data_file:
    line = line.rstrip("\n").split(",")
    data.append([float(line[0]), float(line[1]), float(line[2]) , float(line[3]) , float(line[4])])
data_file.close()

for x in data:
    w_x = np.array([[0.46, 0.43, -0.31, 0.16],
                    [-0.31, 0.08, 0.18, -0.52],
                    [-0.67, 0.27, -0.19, -0.05],
                    [0.02, 0.04, 0.10, -0.35],
                    [-0.87, 0.65, 0.15, -0.12]])

    w_u1 = np.array([[-0.68, 0.01],
                    [0.10, 0.50],
                    [-0.10, -0.21],
                    [-1.25, 0.50]])

    w_u2 =  np.array([0.43, -0.19])

    u1 = np.dot(x, w_x)
    z1 = step(u1)
    u2 = np.dot(z1, w_u1)
    z2 = step(u2)
    u3 = np.dot(z2, w_u2)
    y = step(u3)
    print(y)

### 全体のソースコード


import numpy as np

def step (x):
    y = x > 0 
    return y.astype(np.int)

data = []
data_file = open("gaibu_data.csv", "r",encoding="UTF-8")
for line in data_file:
    line = line.rstrip("＼n").split(",")
    data.append([float(line[0]), float(line[1]), float(line[2]) , float(line[3]) , float(line[4])])
data_file.close()

for x in data:
    w_x = np.array([[0.46, 0.43, -0.31, 0.16],
                    [-0.31, 0.08, 0.18, -0.52],
                    [-0.67, 0.27, -0.19, -0.05],
                    [0.02, 0.04, 0.10, -0.35],
                    [-0.87, 0.65, 0.15, -0.12]])

    w_u1 = np.array([[-0.68, 0.01],
                    [0.10, 0.50],
                    [-0.10, -0.21],
                    [-1.25, 0.50]])

    w_u2 =  np.array([0.43, -0.19])

    u1 = np.dot(x, w_x)
    z1 = step(u1)
    u2 = np.dot(z1, w_u1)
    z2 = step(u2)
    u3 = np.dot(z2, w_u2)
    y = step(u3)

    if y == 0:
        print("あなたは女性的な思考です。")
    else:
        print("あなたは男性的な思考です。")


# オブジェクト指向について学ぼう

## オブジェクト指向をニューラルネットワークに導入してみよう

### コピー元として使用するプログラミングコード

import numpy as np

def step (x):
    y = x > 0 
    return y.astype(np.int)

data = []
data_file = open("gaibu_data.csv", "r",encoding="UTF-8")
for line in data_file:
    line = line.rstrip("＼n").split(",")
    data.append([float(line[0]), float(line[1]), float(line[2]) , float(line[3]) , float(line[4])])
data_file.close()

for x in data:
    w_x = np.array([[0.46, 0.43, -0.31, 0.16],
                    [-0.31, 0.08, 0.18, -0.52],
                    [-0.67, 0.27, -0.19, -0.05],
                    [0.02, 0.04, 0.10, -0.35],
                    [-0.87, 0.65, 0.15, -0.12]])

    w_u1 = np.array([[-0.68, 0.01],
                    [0.10, 0.50],
                    [-0.10, -0.21],
                    [-1.25, 0.50]])

    w_u2 =  np.array([0.43, -0.19])

    u1 = np.dot(x, w_x)
    z1 = step(u1)
    u2 = np.dot(z1, w_u1)
    z2 = step(u2)
    u3 = np.dot(z2, w_u2)
    y = step(u3)

    if y == 0:
        print("あなたは女性的な思考です。")
    else:
        print("あなたは男性的な思考です。")


### 全体のソースコード

import numpy as np

def step (x):
    y = x > 0 
    return y.astype(np.int)

data = []
data_file = open("gaibu_data.csv", "r",encoding="UTF-8")
for line in data_file:
    line = line.rstrip("＼n").split(",")
    data.append([float(line[0]), float(line[1]), float(line[2]) , float(line[3]) , float(line[4])])
data_file.close()

class neuralnetwork:
    def __init__(self):
        self.w_x = np.array([[0.46, 0.43, -0.31, 0.16],
                            [-0.31, 0.08, 0.18, -0.52],
                            [-0.67, 0.27, -0.19, -0.05],
                            [0.02, 0.04, 0.10, -0.35],
                            [-0.87, 0.65, 0.15, -0.12]])
        self.w_u1 = np.array([[-0.68, 0.01],
                    [0.10, 0.50],
                    [-0.10, -0.21],
                    [-1.25, 0.50]])
        self.w_u2 =  np.array([0.43, -0.19])

    def forward(self, x):
        u1 = np.dot(x, self.w_x)
        z1 = step(u1)
        u2 = np.dot(z1, self.w_u1)
        z2 = step(u2)
        u3 = np.dot(z2, self.w_u2)
        y = step(u3)

        if y == 0:
            print("あなたは女性的な思考です。")
        else:
            print("あなたは男性的な思考です。")


nn = neuralnetwork()

for x in data:
    nn.forward(x)