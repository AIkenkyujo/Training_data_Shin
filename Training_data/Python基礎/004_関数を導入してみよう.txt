## 関数を使ってみよう

def triangle_area(height, width):
    area = height * width / 2
    return area

print(triangle_area(10, 20)) 


## 関数を使ってステップ関数を定義してみよう

def step_function(x):
    y = 1 * (x > 0)
    return y

a = 5
b = -2

print(step_function(a))
print(step_function(b))




import numpy as np

x = np.array([-1.0, 1.0, 2.0])

y = x > 0
print(y)

y = y.astype(np.int)
print(y)

# ステップ関数
def step (x):
    y = x > 0 
    return y.astype(np.int) 



## 関数をニューラルネットワークに導入してみよう

### コピー元として使用するプログラミングコード

import numpy as np

x = np.array([2.0, 1.0, 0.5])
w_x = np.array([[0.5, -0.5, -2.0, 1.0], [-1.5, 1.2, -0.8, -0.5], [1.0, -2.0, 0.3, 2.0]])
w_u1 = np.array([[1.2, 2.0], [-1.0, -2.0], [1.2, 1.0], [-0.4, 1.0]])
w_u2 = np.array([1.4, 1.5])

u1 = np.dot(x, w_x)
u2 = np.dot(u1, w_u1)
y = np.dot(u2, w_u2)

print(y)


### 全体のソースコード

import numpy as np

def step (x):
    y = x > 0 
    return y.astype(np.int) 

x = np.array([2.0, 1.0, 0.5])
w_x = np.array([[0.5, -0.5, -2.0, 1.0], [-1.5, 1.2, -0.8, -0.5], [1.0, -2.0, 0.3, 2.0]])
w_u1 = np.array([[1.2, 2.0], [-1.0, -2.0], [1.2, 1.0], [-0.4, 1.0]])
w_u2 = np.array([1.4, 1.5])

u1 = np.dot(x, w_x)
z1 = step(u1)
u2 = np.dot(z1, w_u1)
z2 = step(u2)
y = np.dot(z2, w_u2)

print(y)
